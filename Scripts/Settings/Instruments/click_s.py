import tkinter as tk
from tkinter import Menu
from .utils import algo_s
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg  # <-- –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
import matplotlib.pyplot as plt  # <-- –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
import networkx as nx  # <-- –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç


class RightClickMenu:
    def __init__(self, editor):
        self.editor = editor
        self.selected_node = None
        self.algo_viewer = algo_s.AlgorithmViewer(editor)
        self.bind_events()

    def bind_events(self):
        """–ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏"""
        self.editor.canvas.mpl_connect('button_press_event', self.on_click)

    def on_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏"""
        if not event.inaxes or event.button != 3:  # 3 - –ø—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ —É–∑–ª—É
        self.selected_node = None
        for node, (x, y) in self.editor.graph_manager.pos.items():
            from .utils.nt_help import NodeTypeHelper
            width, height = NodeTypeHelper.calculate_dimensions(self.editor, self.editor.graph_manager.graph, node)

            if (x - width / 2 <= event.xdata <= x + width / 2 and
                    y - height / 2 <= event.ydata <= y + height / 2):
                self.selected_node = node
                break

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ø–æ —É–∑–ª—É
        if self.selected_node and hasattr(event, 'guiEvent'):
            menu = Menu(self.editor.master, tearoff=0)
            menu.add_command(label="–°–≤–æ–π—Å—Ç–≤–∞", command=self.show_properties)  # <-- –ò–∑–º–µ–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
            menu.add_command(label="–ê–ª–≥–æ—Ä–∏—Ç–º—ã",
                             command=lambda: self.algo_viewer.show(self.selected_node))  # <-- –û—Å—Ç–∞–≤–∏–ª —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            menu.post(event.guiEvent.x_root, event.guiEvent.y_root)

    def show_properties(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–≤–æ–π—Å—Ç–≤ —É–∑–ª–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–≤—è–∑–µ–π (–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø)"""
        if not self.selected_node:
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        prop_window = tk.Toplevel(self.editor.master)
        prop_window.title(f"–°–≤–æ–π—Å—Ç–≤–∞: {self.selected_node}")
        prop_window.geometry("800x600")

        # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        G = self.editor.graph_manager.graph
        # –í–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É–∑–µ–ª, –µ–≥–æ —Å–æ—Å–µ–¥–µ–π –∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
        related_nodes = [self.selected_node]
        related_nodes += list(G.successors(self.selected_node))  # –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏
        related_nodes += list(G.predecessors(self.selected_node))  # –í—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏
        subgraph = G.subgraph(related_nodes)

        # 2. –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        fig = plt.figure(figsize=(8, 6))
        ax = fig.add_subplot(111)
        ax.set_axis_off()
        ax.set_title(f"–°–≤—è–∑–∏ —É–∑–ª–∞: {self.selected_node}", pad=20)

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —É–∑–ª–∞
        #pos = nx.spring_layout(subgraph, seed=42, k=0.5)
        pos = {node: self.editor.graph_manager.pos[node] for node in subgraph.nodes()}

        # 3. –†–∏—Å—É–µ–º —Å–≤—è–∑–∏
        nx.draw_networkx_edges(
            subgraph,
            pos,
            ax=ax,
            arrows=True,
            arrowstyle='->',
            width=1.5,
            edge_color='#666666'
        )

        # 4. –†–∏—Å—É–µ–º —É–∑–ª—ã –∫–∞–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ)
        for node, (x, y) in pos.items():
            node_type = subgraph.nodes[node].get('type', 'file')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Ä–∞–∑–º–µ—Ä
            if node == self.selected_node:
                color = '#e31a1c'  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞
                width, height = 0.25, 0.15  # –ë–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä
            else:
                color = '#1f78b4'  # –°–∏–Ω–∏–π –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
                width, height = 0.2 * (0.7 if node_type == "file" else 1.0), \
                                0.1 * (0.7 if node_type == "file" else 1.0)

            # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            rect = plt.Rectangle(
                (x - width / 2, y - height / 2),
                width, height,
                facecolor=color, alpha=0.7, edgecolor='black',
                linewidth=2 if node == self.selected_node else 1
            )
            ax.add_patch(rect)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            label = node.split('/')[-1] if node_type == "file" else node
            ax.text(
                x, y, label,
                ha='center', va='center',
                fontsize=9 if node_type == "file" else 11,
                color='white',
                weight='bold' if node == self.selected_node else 'normal'
            )

        # 5. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        info_frame = tk.Frame(prop_window)
        info_frame.pack(fill=tk.X, padx=10, pady=5)

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        node_type = G.nodes[self.selected_node].get('type', 'unknown')
        in_degree = G.in_degree(self.selected_node)
        out_degree = G.out_degree(self.selected_node)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        tk.Label(info_frame,
                 text=f"–¢–∏–ø: {'üìÅ –ü–∞–ø–∫–∞' if node_type == 'folder' else 'üìÑ –§–∞–π–ª'}",
                 font='Arial 10').pack(anchor='w')
        tk.Label(info_frame,
                 text=f"–í—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏: {in_degree}",
                 font='Arial 10').pack(anchor='w')
        tk.Label(info_frame,
                 text=f"–ò—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏: {out_degree}",
                 font='Arial 10').pack(anchor='w')

        # 6. –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –æ–∫–Ω–æ
        canvas = FigureCanvasTkAgg(fig, prop_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # 7. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        btn_frame = tk.Frame(prop_window)
        btn_frame.pack(fill=tk.X, pady=5)
        tk.Button(
            btn_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=prop_window.destroy,
            width=15
        ).pack(side=tk.RIGHT, padx=10)